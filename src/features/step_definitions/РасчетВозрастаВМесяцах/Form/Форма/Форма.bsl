//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УМеняЕстьНачальнаяДата(Парам01)","УМеняЕстьНачальнаяДата","Допустим у меня есть начальная дата 04.12.1981");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УМеняЕстьКонечнаяДата(Парам01)","УМеняЕстьКонечнаяДата","И у меня есть конечная дата 05.10.2016");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"КоличествоПолныхМесецевБудетРавно(Парам01)","КоличествоПолныхМесецевБудетРавно","Тогда количество полных месецев будет равно 418");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Допустим у меня есть начальная дата 04.12.1981
//@УМеняЕстьНачальнаяДата(Парам01)
Процедура УМеняЕстьНачальнаяДата(НачальнаяДата) Экспорт
	
	Контекст.Вставить("НачальнаяДата", НачальнаяДата);
	
КонецПроцедуры

&НаКлиенте
//И у меня есть конечная дата 05.10.2016
//@УМеняЕстьКонечнаяДата(Парам01)
Процедура УМеняЕстьКонечнаяДата(КонечнаяДата) Экспорт
	
	Контекст.Вставить("КонечнаяДата", КонечнаяДата);
	
КонецПроцедуры

&НаКлиенте
//Тогда количество полных месецев будет равно 418
//@КоличествоПолныхМесецевБудетРавно(Парам01)
Процедура КоличествоПолныхМесецевБудетРавно(ОжидаемыйРезультат) Экспорт
	
	ПолученныйРезультат = ПолучитьКоличествоМеяцевМеждуДвумяДатами(Контекст.НачальнаяДата, Контекст.КонечнаяДата);
	
	Если НЕ ПолученныйРезультат = ОжидаемыйРезультат Тогда
		ВызватьИсключение "Результат расчитан не верно";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Возвращает количество полных месяцев между двумя датами.
//
// Параметры:
//	Дата1 - тип: Дата
//	Дата2 - тип: Дата
//
// Возвращаемое значение:
//	тип: Число
//
Функция ПолучитьКоличествоМеяцевМеждуДвумяДатами(Дата1, Дата2)
	
	ДатаНач	= ?(Дата1 < Дата2, Дата1, Дата2);
	ДатаКон	= ?(Дата1 < Дата2, Дата2, Дата1);
	
	Годы    = Год(ДатаКон)   - Год(ДатаНач);
	Месяцы  = Месяц(ДатаКон) - Месяц(ДатаНач);
	
	Возврат (Месяцы + Годы * 12);
	
КонецФункции

//окончание текста модуля